name: Python App CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
        operating-system: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.OS }}-python-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.OS }}-python-${{ matrix.python-version }}-
          ${{ runner.OS }}-python-
          ${{ runner.OS }}-

    - name: Install dependencies
      run: |
        python -m venv venv
        . ./venv/bin/activate
        pip install --upgrade pip
        if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi

    - name: Format Code
      run: |
        prettier --write **/*.py

    - name: Lint Code
      run: |
        pylint **/*.py || true

    - name: Run Tests
      run: |
        coverage run setup.py test
        coverage report

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      PRODUCTION_DB_URL: postgresql://myuser:$PRODUCTION_DB_PASSWORD@example.com/productiondb
      STAGING_DB_URL: postgresql://myuser:$STAGING_DB_PASSWORD@staging.example.com/stagingdb
    secrets:
      PRODUCTION_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      STAGING_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.OS }}-python-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.OS }}-python-
          ${{ runner.OS }}-

    - name: Install dependencies
      run: |
        python -m venv venv
        . ./venv/bin/activate
        pip install --upgrade pip
        if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi

    - name: Deploy to staging
      env:
        DATABASE_URL: "${{ env.STAGING_DB_URL }}"
      run: |
        echo $DATABASE_URL
        fab deploy_to_staging
        
    - name: Deploy to production
      env:
        DATABASE_URL: "${{ env.PRODUCTION_DB_URL }}"
      run: |
        echo $DATABASE_URL
        fab deploy_to_production
