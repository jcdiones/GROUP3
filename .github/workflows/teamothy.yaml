name: Python App CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
        operating-system: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.OS }}-python-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.OS }}-python-${{ matrix.python-version }}-
          ${{ runner.OS }}-python-
          ${{ runner.OS }}-

    - name: Install dependencies
      run: |
        python -m venv venv
        . ./venv/bin/activate
        pip install --upgrade pip
        if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi

    - name: Format Code
      run: |
        prettier --write **/*.py

    - name: Lint Code
      run: |
        pylint **/*.py || true

    - name: Run Tests
      run: |
        coverage run setup.py test
        coverage report

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.OS }}-python-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.OS }}-python-
          ${{ runner.OS }}-

    - name: Install dependencies
      run: |
        python -m venv venv
        . ./venv/bin/activate
        pip install --upgrade pip
        if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi

    - name: Get deployment vars
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment }}
      run: echo ::set-output name=DEPLOYMENT_VARS::$(printenv | jq -c '.|with_entries(select(.key | startswith("DEPLOYMENT")))' | base64)

    - name: Decode DEPLOYMENT_VARS
      id: decode-deployment-vars
      run: echo "${{ steps.get-deployment-vars.outputs.DEPLOYMENT_VARS }}" | base64 --decode > /tmp/$GITHUB_WORKFLOW-$ENVIRONMENT.json && export $(cat /tmp/$GITHUB_WORKFLOW-$ENVIRONMENT.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' | xargs)

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Image
      id: build-and-push
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        TAG: latest
      run: |
        docker build -t $REGISTRY/group3/app:$TAG .
        docker push $REGISTRY/group3/app:$TAG

    - name: Deploy to Fargate
      env:
        CLUSTER: my-cluster
        SERVICE: my-service
        REGION: us-east-1
        TASK_DEFINITION: group3/app:${{ env.TAG }}
      run: |
        ecs deploy --cluster $CLUSTER --service $SERVICE --region $REGION --task-definition $TASK_DEFINITION
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
